import Head from "next/head";
import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import styles from "../styles/Home.module.css";
import Table from "../components/tabla/Table";
import ModalEditForm from "../components/modalEditForm/ModalEditForm";
import HeaderForms from "../components/headerForms/HeaderForms";
import {
  userCollectionRef,
  createUser,
  updateUser,
  handleDelete,
} from "../utils/dbFunctions";
import { createNewDoc, defaultReset } from "../utils/formatingFunctions";
import { getDocs } from "firebase/firestore";

export default function Home() {
  const [data, setData] = useState([]);
  const [display, setDisplay] = useState([]);
  const [editContactId, setEditContactId] = useState(null);
  const [elementToEdit, setElementToEdit] = useState({});

  const updateAllData = async () => {
    try {
      const data = await getDocs(userCollectionRef);
      setData(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));
    } catch (err) {
      console.log(err);
    }
  };

  const {register,handleSubmit,formState: { errors },reset} = useForm();

  const addContact = (event) => {
    const newContact = createNewDoc(event);
    createUser(newContact);
    reset(defaultReset);
    updateAllData();
  };

  const editRow = (event) => {
    const newContact = createNewDoc(event);
    updateUser(editContactId, newContact);
    let newList = display.map((e) => {
      if (e.id === editContactId) {
        return { id: e.id, ...newContact };
      }
      return e;
    });

    setEditContactId(null);
    setDisplay(newList);
  };

  useEffect(() => updateAllData, []);
  useEffect(() => {setDisplay(data)}, [data]);

  return (
    <div className={styles.container}>
      <Head>
        <title>GlobalTable</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {editContactId && (
        <ModalEditForm
          elementToEdit={elementToEdit}
          editRow={editRow}
          setEditContactId={setEditContactId}
        />
      )}

      <HeaderForms
        setDisplay={setDisplay}
        data={data}
        display={display}
        addContact={addContact}
        register={register}
        handleSubmit={handleSubmit}
        errors={errors}
      />

      <main className={styles.main}>
        <Table
          setDisplay={setDisplay}
          data={display}
          setElementToEdit={setElementToEdit}
          setEditContactId={setEditContactId}
          handleDelete={handleDelete}
          addContact={addContact}
        />
      </main>

      <footer className={styles.footer}>
        Powered by <span className={styles.logo}>Global</span>
      </footer>
    </div>
  );
}
