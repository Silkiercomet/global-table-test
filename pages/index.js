import Head from 'next/head'
import {useState, useEffect} from "react"
import { useForm } from "react-hook-form";
import styles from '../styles/Home.module.css'
import Table from "../components/tabla/Table"
import { nanoid } from 'nanoid'
import AddForm from '../components/addForm/AddForm';
import ModalEditForm from '../components/modalEditForm/ModalEditForm';
import { db } from '../firebase-config';
import {collection, getDocs, addDoc, updateDoc, doc, deleteDoc} from "firebase/firestore"

export default function Home() {
  
  const [display, setDisplay] = useState([])
  const [add, setAdd] = useState(true)
  const [editContactId, setEditContactId] = useState(null);
  const [elementToEdit, setElementToEdit] = useState({});

  const userCollectionRef = collection(db, "users")
  useEffect(() => {

    (async function() {
      const data = await getDocs(userCollectionRef)
      setDisplay(data.docs.map(doc => ({...doc.data(), id: doc.id})));
    })();

  },[])
  const createUser = async (contact) => {
    await addDoc(userCollectionRef, contact)
  }

  const updateUser = async (id, data) => {
    const userDoc = doc(db, "users", id)
    await updateDoc(userDoc, data)
  }
  const deleteUser = async (id) => {
    const userDoc = doc(db, "users", id)
    await deleteDoc(userDoc)
  }

  const { register, handleSubmit, formState: { errors }, reset } = useForm();
  const addContact = (event) => {
    const newContact = {
      name:event.name,
      username:event.username,
      email:event.email,
      address:{
        street:event.street,
        suite: event.suite,
        city: event.city
        }
      }

      createUser(newContact)

      reset({name:"",username:"",email:"",
        street:"",
        suite: "",
        city: ""
      })
    setDisplay([...display, {id: nanoid(),...newContact}])
  }
  const editRow = (event) => {
    const newContact = {
      name:event.name,
      username:event.username,
      email:event.email,
      address:{
        street:event.street,
        suite: event.suite,
        city: event.city
        }
      }
      updateUser(editContactId,newContact)
      let newList = display.map(e => {
        if(e.id === editContactId){
          console.log({ id:e.id , ...newContact})
            return { id:e.id , ...newContact}
        }
        return e
    })
    setEditContactId(null)
    setDisplay(newList)
  }
  const handleDelete = (id) => {
    deleteUser(id)
    const newList = display.filter(e => e.id !== id)
    setDisplay(newList)
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>GlobalTable</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {editContactId && <ModalEditForm elementToEdit={elementToEdit} editRow={editRow} setEditContactId={setEditContactId}/>}
      <div className='form__container'>
        <button className={styles.addBtn} onClick={() => setAdd(!add)}>add +</button>
        <article style={ {display: add ?  "none" : "block"}}>
          <AddForm register={register} handleSubmit={handleSubmit} errors={errors} addContact={addContact} />
        </article>
      </div>
      
      <main className={styles.main}>
        <Table data={display} setElementToEdit={setElementToEdit} setEditContactId={setEditContactId} handleDelete={handleDelete} />
      </main>

      <footer className={styles.footer}>

          Powered by{' '}
          <span className={styles.logo}>
            Global
          </span>

      </footer>
    </div>
  )
}

